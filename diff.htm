<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"> 
 
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"> 
  <head> 
    <title>Page Monitor: View Changes</title>
    <script type="text/javascript" src="difflib.js"></script>
    <script type="text/javascript">
      // Helpers to store and access objects in local storage.
      Storage.prototype.setObject = function(key, value) {
        this.setItem(key, JSON.stringify(value));
      }
      Storage.prototype.getObject = function(key) {
        var value = this.getItem(key);
        if (value == null) {
          return null;
        } else {
          return JSON.parse(value);
        }
      }
      
      var bg = chrome.extension.getBackgroundPage();
      
      function diff(src, dest) {
        var src =  html2list(src.replace(/\s+/g, ' '));
        var dest =  html2list(dest.replace(/\s+/g, ' '));
        var matcher = new difflib.SequenceMatcher(src, dest);
        var opcodes = matcher.get_opcodes();
        var out = [];
        
        for (var i = 0; i < opcodes.length; i++) {
          var opcode = opcodes[i][0];
          var src_start = opcodes[i][1];
          var src_end = opcodes[i][2];
          var dest_start = opcodes[i][3];
          var dest_end = opcodes[i][4];
          
          //alert(opcode + '\n\n' + src.slice(src_start, src_end) + '\n\n' + dest.slice(dest_start, dest_end));
          
          switch (opcode) {
            case 'replace':
              out = out.concat(wrapText(src.slice(src_start, src_end), '<del>', '</del>'));
              out = out.concat(wrapText(dest.slice(dest_start, dest_end), '<ins>', '</ins>'));
              break;
            case 'delete':
              out = out.concat(wrapText(src.slice(src_start, src_end), '<del>', '</del>'));
              break;
            case 'insert':
              out = out.concat(wrapText(dest.slice(dest_start, dest_end), '<ins>', '</ins>'));
              break;
            case 'equal':
              out = out.concat(dest.slice(dest_start, dest_end));
              break;
            default:
              alert('Diffing error. Please report this.');
              return;
          }
        }
        
        var compiled_html = out.join('');
        
        document.getElementsByTagName('body')[0].innerHTML = compiled_html;
      }
      
      function wrapText(list, prefix, suffix) {
        var out = [];
        var buffer = [];
        
        for (var i=0; i < list.length; i++) {
          if (list[i][0] == '<') {
            if (buffer.length > 0) {
              out.push(prefix);
              out = out.concat(buffer);
              out.push(suffix);
              buffer = [];
            }
            out.push(list[i]);
          } else {
            buffer.push(list[i]);
          }
        }
        
        if (buffer.length > 0) {
          out.push(prefix);
          out = out.concat(buffer);
          out.push(suffix);
          buffer = [];
        }
        
        return out;
      }
      
      function html2list(x) {
        var CHAR = 0;
        var TAG = 1;
        var mode = CHAR;
        var cur = '';
        var out = [];
        
        for (var i = 0; i < x.length; i++) {
          var c = x[i];
          
          if (mode == TAG) {
            cur += c;
            if (c == '>') {
              out.push(cur);
              cur = '';
              mode = CHAR;
            }
          } else if (mode == CHAR) {
            if (c == '<') {
              out.push(cur);
              cur = c;
              mode = TAG;
            } else if (x.slice(i, i + 2).match(/^.\b.$/)) {
              out.push(cur + c);
              cur = '';
            } else {
              cur += c;
            }
          }
        }
        out.push(cur);
        
        var filtered = [];
        
        for (var i = 0; i < out.length; i++) {
          if (out[i] != '') filtered.push(out[i]);
        }
        
        return filtered;
      }
      
      function startDiff() {
        var url = atob(window.location.hash.substr(1));
        var page = localStorage.getObject('pages_to_check')[url];
        console.log(page);
        var src = page.last_html.replace(/\s+/g, ' ');;
        var dest = page.html.replace(/\s+/g, ' ');;

        function tryToGetBody(html) {
          var body = html.match(/<body[^>]*>(.*)<\/body>/i);
          if (body && body.length > 1) {
            return body[1];
          } else {
            return html;
          }
        }
      
        // Get base.
        var base = url;
        var src_base = src.match(/<base[^>]*href=['"]?([^>'"]+)[^>]*>/i);
        var dest_base = src.match(/<base[^>]*href=['"]?([^>'"]+)[^>]*>/i);

        if (src_base && src_base.length > 0) {
          base = src_base[src_base.length - 1];
        } else if (dest_base && dest_base.length > 0) {
          base = dest_base[dest_base.length - 1];
        }
        
        var base_element = document.createElement('base');
        base_element.href = base;
        document.head.appendChild(base_element);
        
        // Get inline styles.
        var styles = src.match(/<style[^>]*>(.*?)<\/style>/ig);
        
        if (styles) {
          for (var i = 0; i < styles.length; i++) {
            styles[i] = styles[i].replace(/<\/?style[^>]*>/ig, '');
            style = document.createElement('style');
            style.type = 'text/css';
            style.innerText = styles[i];
            document.head.appendChild(style);
          }
        }
        
        // Get referenced styles.
        var ref_styles = src.match(/<link[^>]*rel\s*=\s*["']?stylesheet["']?[^>]*href=["']?[^>'"]+["']?[^>]*>/ig);
        
        if (ref_styles) {
          for (var i = 0; i < ref_styles.length; i++) {
            ref_styles[i] = ref_styles[i].match(/href=["']?([^>'"]+)["']?/i)[1];
            ref_style = document.createElement('link');
            ref_style.rel = 'stylesheet';
            ref_style.type = 'text/css';
            ref_style.href = ref_styles[i];
            document.head.appendChild(ref_style);
          }
        }
        
        // Generate diffed body.
        diff(tryToGetBody(src), tryToGetBody(dest));
      }
    </script>
    <style type="text/css">
      del {
        background: #d65 !important;
        color: black !important;
        text-decoration: none !important;
      }
      ins {
        background: #6d5 !important;
        color: black !important;
        text-decoration: none;
      }
    </style>
  </head> 
  <body onload="startDiff();">
    <div style="font-family: Calibri, Tahoma, sans-serif; margin: auto; text-align: center; margin-top: 300px;">
      Diffing in progress...
      <br/>
      <img src="loader.gif">
    </div>
  </body>
</html>