<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title>Page Monitor Options</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="shortcut icon" type="image/png" href="image/browser_icon.png" />
  <link rel="stylesheet" type="text/css" href="lib/colorPicker.css" />
  <link rel="stylesheet" type="text/css" href="styles.css" />
  <script type="text/javascript" src="lib/jquery-1.4.1.js"></script>
  <script type="text/javascript" src="lib/jquery.colorPicker.js"></script>
  <script type="text/javascript" src="monitor.js"></script>
  <script type="text/javascript">
    function initializeColorPicker() {
      var toHex = function(d) {
        return d >= 16 ? d.toString(16) : '0' + d.toString(16);
      }
      
      var badge_color = getSetting(SETTINGS.badge_color);
      var badge_color = '#' + toHex(badge_color[0]) + 
                              toHex(badge_color[1]) +
                              toHex(badge_color[2]);
      
      $('#badge_color_picker').val(badge_color).change(function() {
        var color = $(this).val();
      
        setSetting(SETTINGS.badge_color, [parseInt(color.slice(1,3), 16),
                                          parseInt(color.slice(3,5), 16),
                                          parseInt(color.slice(5,7), 16),
                                          255]);
        updateBadge();
      }).colorPicker();
    }
    
    function initializeTimeoutTextbox() {
      var timeout = Math.round(getSetting(SETTINGS.timeout) / (60 * 1000));
      
      $('#global_timeout').val(timeout).keyup(function() {
        setSetting(SETTINGS.timeout, cleanTimeoutTextbox(this) * 60 * 1000);
      }).blur(function() { $(this).keyup(); });
    }
    
    function cleanTimeoutTextbox(textbox) {
      var caret_pos = textbox.selectionStart;
      var caret_end = textbox.selectionEnd;
      
      var new_timeout = parseInt($(textbox).val().replace(/[^0-9]/g, '')) || 1;
      $(textbox).val(new_timeout);
      
      this.selectionStart = caret_pos;
      this.selectionEnd = caret_end;
      
      return new_timeout;
    }
    
    // Returns the URL of the page record given any element in it.
    function findUrl(context) {
      return $(context).closest('.page_record').find('.page_link').get()[0].href;
    }
    
    // Returns the page record given its URL.
    function findPageRecord(url) {
      return $('.page_record').filter(function() {
        return $(this).has('a[href=' + url + ']');
      });
    }
    
    function fillPagesList() {
      var pages = getSetting(SETTINGS.pages_list);
      
      $('#pages').html('');
      
      if (pages.length > 0) {
        $.each(pages, function(i, url) {
          var page_record = $('#templates .page_record').clone();
          var advanced_set = false;
      
          var name = getPageSetting(url, SETTINGS.page.name) || 'Untitled (' + url + ')';
          if (name.length > 60) {
            name = name.replace(/([^]{20,60})(\w)\b.*$/, '$1$2...');
          }
          
          page_record.find('.page_link').attr({
            href: url
          }).text(name);
          
          page_record.find('.favicon').attr({
            src: getPageSetting(url, SETTINGS.page.icon) || 'img/page.png'
          });
          
          var last_check_updater = function() {
            var last_check = getPageSetting(url, SETTINGS.page.last_check);
            var last_check_span = page_record.find('.last_check_time');
            var last_check_message = last_check ? describeTimeSince(last_check) : 'never';
            
            if (last_check_message != last_check_span.text()) {
              last_check_span.fadeOut('slow', function() {
                $(this).text(last_check_message).fadeIn('slow');
              });
            }
          }
          last_check_updater();
          setInterval(last_check_updater, 15000);
          
          var timeout = getPageTimeout(url) / (60 * 1000);
          page_record.find('.timeout input[type=text]').val(timeout);
          if (getPageSetting(url, SETTINGS.page.timeout)) {
            page_record.find('.timeout span').addClass('enabled').removeClass('disabled');
            page_record.find('.timeout input').attr({ disabled: false });
            page_record.find('.timeout input[type=checkbox]').attr({ checked: true });
            advanced_set = true;
          }
          
          var regex = getPageSetting(url, SETTINGS.page.regex);
          if (regex) {
            page_record.find('.regex span').addClass('enabled').removeClass('disabled');
            page_record.find('.regex input').attr({ disabled: false });
            page_record.find('.regex input[type=checkbox]').attr({ checked: true });
            page_record.find('.regex input[type=text]').val(regex);
            advanced_set = true;
          }
          
          if (advanced_set) {
            page_record.find('.advanced_toggle input[type=checkbox]').attr({ checked: true });
            page_record.find('.advanced_toggle').addClass('toggled');
            page_record.find('.advanced_controls').css({ display: 'block' });
          }
          
          page_record.appendTo('#pages');
        });
      } else {
        $('#templates .empty').clone().appendTo('#pages');
      }
    }
    
    function setPageTimeout(context, timeout) {
      var url = findUrl(context);
      
      if (timeout === null)  {
        deletePageSetting(url, SETTINGS.page.timeout);
      } else {
        timeout = parseInt(timeout) * 60 * 1000;
        if (timeout) {
          setPageSetting(url, SETTINGS.page.timeout, timeout);
          schedulePageCheck(url);
        }
      }
    }
    
    function setPageRegex(context, regex) {
      if (regex === null)  {
        deletePageSetting(findUrl(context), SETTINGS.page.regex);
      } else {
        var is_valid_regex = true;
        try {
          temp_regex = new RegExp(regex);
        } catch (e) {
          is_valid_regex = false;
        }
      
        var regex_textbox = $(context).closest('.page_record').find('.regex input[type=text]');
        var regex_test_button = $(context).closest('.page_record').find('.regex input[type=button]');
        if (is_valid_regex) {
          regex_textbox.removeClass('invalid');
          regex_test_button.attr({ disabled: false });
          setPageSetting(findUrl(context), SETTINGS.page.regex, regex);
        } else {
          regex_test_button.attr({ disabled: true });
          regex_textbox.addClass('invalid');
        }
      }
    }
    
    $(function() {
      // Set up the main color/timeout contols.
      initializeColorPicker();
      initializeTimeoutTextbox();
      
      // Set up the "Check All Now" button handler.
      $('#check_now').click(function() {
        var pages = getSetting(SETTINGS.pages_list);
        
        $('.last_check_time').text('checking..');
        
        $.each(pages, function(i, url) {
          checkPage(url);
        });
      });
      
      // Set up "rename page" live click handlers.
      $('.rename').live('click', function() {
        var record = $(this).closest('.page_record');
        var page_link = record.find('.page_link');
        
        if (!page_link.is(':hidden')) {
          var textbox = $('<input type="text" value="' + page_link.text() + '" />');
          var cancel_button = $('<input type="button" value="Cancel" />');
          var ok_button = $('<input type="button" value="Ok" />');
          
          cancel_button.click(function() {
            textbox.remove();
            ok_button.remove();
            cancel_button.remove();
            page_link.show();
          });
          
          ok_button.click(function() {
            page_link.text(textbox.val());
            setPageSetting(findUrl(this), SETTINGS.page.name, textbox.val());
            cancel_button.click();
          });
          
          page_link.hide();
          page_link.after(cancel_button).after(ok_button).after(textbox);
        }
      });
      
      // Set up "stop monitoring" live click handlers.
      $('.stop_monitoring').live('click', function() {
        var url = findUrl(this);
        
        removePage(url);
        updateBadge();
        
        $(this).closest('.page_record td').slideUp('slow', function() {
          if ($('#pages .page_record').length == 1) {
            $('#pages').animate(
              { height: '50px', opacity: 1 }, 'slow', fillPagesList
            );
          } else {
            fillPagesList();
          }
        });
      });
      
      // Set up advanced option expansion events.
      $('.advanced_toggle input').live('click', function() {
        if ($(this).is(':checked')) {
          $(this).closest('.page_record').find('.advanced_toggle').addClass('toggled');
          $(this).closest('.page_record').find('.advanced_controls').slideDown('fast');
          
          // Apply previously-set advanced settings.
          var timeout_div = $(this).closest('.page_record').find('.timeout');
          if (timeout_div.find(':checked').length > 0) {
            setPageTimeout(this, timeout_div.find('input[type=text]').val());
          }
          var regex_div = $(this).closest('.page_record').find('.regex');
          if (regex_div.find(':checked').length > 0) {
            setPageRegex(this, regex_div.find('input[type=text]').val());
          }
        } else {
          $(this).closest('.page_record').find('.advanced_controls').slideUp('fast', function() {
            $(this).closest('.page_record').find('.advanced_toggle').removeClass('toggled');
          });
          
          setPageTimeout(this, null);
          setPageRegex(this, null);
        }
      });
      
      // Set up advanced option enabling/disabling events.
      $('.advanced_controls input[type=checkbox]').live('click', function() {
        if ($(this).is(':checked')) {
          $(this).nextAll('span').addClass('enabled').removeClass('disabled');
          $(this).nextAll('span').find('input').attr({ disabled: false });
        } else {
          $(this).nextAll('span').addClass('disabled').removeClass('enabled');
          $(this).nextAll('span').find('input').attr({ disabled: true });
        }
      });
      
      $('.timeout input[type=checkbox]').live('click', function() {
        if ($(this).is(':checked')) {
          setPageTimeout(this, $(this).nextAll('span').find('input').val());
        } else {
          setPageTimeout(this, null);
        }
      });
      
      $('.regex input[type=checkbox]').live('click', function() {
        if ($(this).is(':checked')) {
          setPageRegex(this, $(this).nextAll('span').find('input').val());
        } else {
          setPageRegex(this, null);
        }
      });
      
      // Set advanced option editing events.
      $('.timeout input[type=text]').live('keyup', function() {
        setPageTimeout(this, cleanTimeoutTextbox(this));
      });
      $('.regex input[type=text]').live('keyup', function() {
        setPageRegex(this, $(this).val());
      });
      
      // Set up regex test click handler
      $('.regex input[type=button]').live('click', function() {
        var url = findUrl(this);
        var regex = getPageSetting(url, SETTINGS.page.regex);
        var button = $(this);
        
        if (regex) {
          $(this).val('Testing...');
          $(this).closest('.regex').find('input').attr({ disabled: true });
          $.ajax({
            url: url,
            success: function(html) {
              results = findAndFormatRegexMatches(html, regex);
              if (results) {
                alert('Matched:\n' + results);
              } else {
                alert('No matches.');
              }
            },
            error: function() {
              alert('Could not retrieve selected page.');
            },
            complete: function() {
              button.value = 'Test';
              button.closest('.regex').find('input').attr({ disabled: false });
            }
          });
        }
      });
      
      // Finally, fill the pages list.
      fillPagesList();
    });
  </script>
  <style type="text/css">
    body {
      width: 780px;
      margin: auto;
      padding-bottom: 5.5em;
    }
    
    .main_controls .util, .main_controls .util:link, .main_controls .util:visited {
      float: right;
      margin-left: 1.95em;
      margin-right: 1.9em;
    }
    
    .color_picker {
      display: inline-block;
      position: relative;
      top: 2px;
    }
    
    .toggled {
      position: relative;
      left: -1px;
      border: 1px solid #9eafd1;
      border-radius: 5px 5px 0px 0px;
      border-bottom: 1px white solid;
      margin-right: -2px;
      z-index: 1;
    }
    
    .advanced_controls {
      position: relative;
      top: -1px;
      left: -1px;
      border: 1px solid #9eafd1;
      margin-left: 50px;
      padding: 10px;
      padding-left: 20px;
      display: none;
      border-radius: 0px 5px 5px 5px;
    }
    
    .advanced_toggle input {
      position: relative;
      top: 2px;
    }
    
    .page_info {
      margin-bottom: 10px;
    }
    
    .advanced_controls div {
      margin-top: 5px;
    }
    
    .advanced_controls .disabled {
      color: #999999;
    }
    
    .advanced_controls .enabled {
      color: #849ccb;
    }
    
    .advanced_controls input[type=button] {
      height: 1.6em;
      position: relative;
      top: 1px;
    }
    
    .advanced_controls input[type=checkbox] {
      position: relative;
      top: 2px;
    }
    
    .regex input[type=text] {
      width: 400px;
      padding-left: 1px;
      height: 1em;
      border: 1px #bbb solid;
      -webkit-transition: background-color 0.2s linear;
    }
    
    .invalid {
      background: #fcc;
    }
    
    .timeout input[type=text] {
      width: 3em;
      text-align: center;
    }
    
    .page_info input {
      position: relative;
      top: -2px;
    }
    
    .page_info input[type=text] {
      width: 600px;
      height: 1.25em;
    }
    
    #global_timeout {
      width: 3em;
      text-align: center;
      border: 1px #a4bceb solid;
    }
  </style>
</head>
<body>
  <h1>Monitored Pages</h1>
  <table id="templates">
    <tr class="page_record">
      <td>
        <div class="page_info">
          <img class="favicon" src="img/page.png" />
          <a class="page_link" title="Visit Page" href="#" target="_blank">Page</a>
        </div>
        <div class="page_controls">
          <label class="util advanced_toggle">
            <!--img src="img/plus.png" /-->
            <input type="checkbox" />
            advanced
          </label>
          <span class="util rename">
            <img src="img/rename.png" />
            rename page
          </span>
          <span class="util stop_monitoring">
            <img src="img/stop_monitoring.png" />
            stop monitoring
          </span>
          <span class="util last_check inactive">
            <img src="img/monitor.png" />
            Last Check: <span class="last_check_time">unknown</span>.
          </span>
          <div class="advanced_controls">
            <div class="timeout">
              <input type="checkbox" />
              <span class="disabled">
                Check every
                <input type="text" disabled="disabled" />
                minutes.
              </span>
            </div>
            <div class="regex">
              <input type="checkbox" />
              <span class="disabled">
                Regex:
                <input type="text" disabled="disabled" />
                <input type="button" disabled="disabled" value="Test" />
              </span>
            </div>
          </div>
        </div>
      </td>
    </tr>
    <tr class="empty">
      <td>
        No pages are being monitored.
      </td>
    </tr>
  </table>
  
  <table id="pages" cellspacing="0">
    <!-- Pages go here. -->
  </table>
  <hr />
  <p class="main_controls">
    <span class="util" id="check_now">
      <img src="img/refresh.png" />
      Check All Now
    </span>
    <span class="util inactive">
      <img src="img/clock.png" />
      Check every
      <input type="text" id="global_timeout" value="180" maxlength="5" />
      minutes.
    </span>
    <span class="util inactive">
      <img src="img/color.png" />
      Badge color:
      <input id="badge_color_picker" name="badge_color_picker" type="text" value="#00B400" />
    </span>
    <a class="util" href="https://chrome.google.com/extensions/detail/pemhgklkefakciniebenbfclihhmmfcd" target="_blank">
      <img src="img/feedback.png" />
      Feedback
    </a>
  </p>
</body>
</html>