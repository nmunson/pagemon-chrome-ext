<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Page Monitor Options</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="shortcut icon" type="image/png" href="image/browser_icon.png" />
  <link rel="stylesheet" type="text/css" href="lib/colorPicker.css" />
  <link rel="stylesheet" type="text/css" href="styles.css" />
  <link rel="stylesheet" type="text/css" href="styles_options.css" />
  <script type="text/javascript" src="lib/jquery-1.4.1.js"></script>
  <script type="text/javascript" src="lib/jquery.colorPicker.js"></script>
  <script type="text/javascript" src="monitor.js"></script>
  <script type="text/javascript">
    // Background graying function, based on: 
    // http://www.hunlock.com/blogs/Snippets:_Howto_Grey-Out_The_Screen
    function grayOut(show, id_prefix) {
      // Pass true to gray out screen, false to ungray.
      var dark_id = (id_prefix || '') + '_shader';
      var dark = document.getElementById(dark_id);
      var first_time = (dark == null);
      
      if (first_time) {
        // First time - create shading layer.
        var dark = document.createElement('div');
        dark.id = dark_id;
        
        dark.style.position = 'absolute';
        dark.style.top = '0px';
        dark.style.left = '0px';
        dark.style.overflow = 'hidden';
        dark.style.opacity = '0';
        dark.style['-webkit-transition'] = 'opacity 0.5s ease';
        
        document.body.appendChild(dark);
      }
      
      if (show) {
        // Set the shader to cover the entire page and make it visible.
        dark.style.zIndex = 1;
        dark.style.backgroundColor = '#000000';
        dark.style.width = document.body.scrollWidth + 'px';
        dark.style.height = document.body.scrollHeight + 'px';
        dark.style.display = 'block';
        
        setTimeout(function() {dark.style.opacity = 0.7;}, 100);
      } else if (dark.style.opacity != 0) {
        setTimeout(function() {dark.style.opacity = 0;}, 100);
        setTimeout(function() {dark.style.display = 'none';}, 600);
      }
    }

    function initializeColorPicker() {
      var toHex = function(d) {
        return d >= 16 ? d.toString(16) : '0' + d.toString(16);
      }
      
      var badge_color = getSetting(SETTINGS.badge_color);
      var badge_color = '#' + toHex(badge_color[0]) + 
                              toHex(badge_color[1]) +
                              toHex(badge_color[2]);
      
      $('#badge_color input').val(badge_color).change(function() {
        var color = $(this).val();
      
        setSetting(SETTINGS.badge_color, [parseInt(color.slice(1,3), 16),
                                          parseInt(color.slice(3,5), 16),
                                          parseInt(color.slice(5,7), 16),
                                          255]);
        BG.updateBadge();
      }).colorPicker();
    }
      
    function initializeAnimationToggler() {
      $('#animation select').change(function() {
        var disabled = ($(this).val() != 'enabled');
        setSetting(SETTINGS.animations_disabled, disabled);
        $.fx.off = disabled;
      }).val(getSetting(SETTINGS.animations_disabled) ? 'disabled' : 'enabled');
    }
    
    function initializeSorter() {
      $('#sort select').change(function() {
        setSetting(SETTINGS.sort_by, $(this).val());
        fillPagesList();
      }).val(getSetting(SETTINGS.sort_by) || 'date added');
    }
    
    function initializeNotificationsChecker() {
      if (window.webkitNotifications.checkPermission() != 0) {
        setSetting(SETTINGS.notifications_enabled, false);
      }
      
      $('#notifications select').change(function() {
        var $this = $(this);
      
        var enabled = ($this.val() == 'enabled');
        if (enabled) {
          if (window.webkitNotifications.checkPermission() == 0) {
            setSetting(SETTINGS.notifications_enabled, true);
          } else {
            $this.val('disabled');
            webkitNotifications.requestPermission(function() {
              if (window.webkitNotifications.checkPermission() == 0) {
                setSetting(SETTINGS.notifications_enabled, true);
                $this.val('enabled');
              }
            });
          }
        } else {
          setSetting(SETTINGS.notifications_enabled, false);
        }
      }).val(getSetting(SETTINGS.notifications_enabled) ? 'enabled' : 'disabled');
      
      var timeout = (getSetting(SETTINGS.notifications_timeout) / 1000) || 30;
      $('#notifications input').val(timeout).keyup(function() {
        var new_timeout = cleanTimeoutTextbox(this);
        if (new_timeout < 1) {
          new_timeout = 1;
          $(this).val(new_timeout);
        }
        setSetting(SETTINGS.notifications_timeout, new_timeout * 1000);
      }).blur(function() { $(this).keyup(); });
    }
    
    function initializeSoundSelector() {
      var select = $('#sound_alert select');
      var play_button = $('#sound_alert input[type="button"][value="Play"]');
      var new_button = $('#sound_alert input[type="button"][value="New"]');
      var new_form = $('#new_sound_form');
      
      new_form.css({
        top: (window.innerHeight - new_form.height()) / 2,
        left: (window.innerWidth - new_form.width()) / 2
      });
      
      var custom_sounds = getSetting(SETTINGS.custom_sounds) || [];
      $.each(custom_sounds, function(i, v) {
        $('<option>').text(v.name).attr('value', v.url).appendTo(select);
      });
      
      select.change(function() {
        var audio_file = select.val();
        
        setSetting(SETTINGS.sound_alert, audio_file);
        
        play_button.attr({ disabled: audio_file == '' });
      });
      
      play_button.click(function() {
        select.attr({ disabled: true });
        play_button.attr({ disabled: true });
        
        var audio = new Audio(select.val());
        
        audio.addEventListener('ended', function() {
          select.attr({ disabled: false });
          play_button.attr({ disabled: false });
        });
        audio.play();
      });
      
      new_button.click(function() {
        $('input', new_form).val('');
        grayOut(true);
        new_form.fadeIn();
      });
      
      $('#new_sound_cancel').click(function() {
        grayOut(false);
        new_form.fadeOut();
      });
      
      $('#new_sound_create').click(function() {
        var name = $('#new_sound_name').val();
        var url = $('#new_sound_url').val();
        var create_button = $(this);
        
        if (!(url && name)) {
          alert('Please enter a name and a URL for the new sound.');
          return;
        }
        
        create_button.attr('disabled', true);
        create_button.css('cursor', 'progress');
        
        var restoreCreateButton = function() {
          create_button.attr('disabled', false);
          create_button.css('cursor', 'auto');
        }
        
        new Audio(url).addEventListener('error', function() {
          alert('Chrome could not play the file at the specified URL.');
          restoreCreateButton();
        });
        new Audio(url).addEventListener('canplaythrough', function() {
          var custom_sounds = getSetting(SETTINGS.custom_sounds) || [];
          custom_sounds.push({ name: name, url: url });
          setSetting(SETTINGS.custom_sounds, custom_sounds);
          
          $('<option>').text(name).attr('value', url).appendTo(select);
          
          restoreCreateButton();
          grayOut(false);
          new_form.fadeOut();
        });
      });
      
      select.val(getSetting(SETTINGS.sound_alert) || '');
      select.change();
    }
    
    function initializeExporter() {
      var form = $('#export_form');
      
      $('#export').click(function() {
        $('textarea', form).val(exportPagesList());
        grayOut(true);
        form.fadeIn();
      });
    
      $('button', form).click(function() {
        form.fadeOut();
        grayOut(false);
      });
    }
    
    function initializeImporter() {
      var form = $('#import_form');
      
      $('#import').click(function() {
        grayOut(true);
        form.fadeIn();
      });
        
      $('#import_cancel', form).click(function() {
        form.fadeOut();
        grayOut(false);
      });
      
      $('#import_perform', form).click(function() {
        var count = 0;
        try {
          count = importPagesList($('textarea', form).val());
        } catch (e) {
          alert('Error encountered. Import may be incomplete.');
          form.fadeOut();
          grayOut(false);
          return;
        }
        if (count) {
          alert('Successfully imported ' + count + ' page' + (count == 1 ? '' : 's') + '.');
          fillPagesList();
        } else {
          alert('No pages to import found in input.');
        }
        form.fadeOut();
        grayOut(false);
      });
    }
    
    function initializeTimeoutTextbox() {
      var timeout = Math.round(getSetting(SETTINGS.timeout) / (60 * 1000));
      
      $('#global_timeout input').val(timeout).keyup(function() {
        setSetting(SETTINGS.timeout, cleanTimeoutTextbox(this) * 60 * 1000);
      }).blur(function() { $(this).keyup(); });
    }
    
    function cleanTimeoutTextbox(textbox) {
      var caret_pos = textbox.selectionStart;
      var caret_end = textbox.selectionEnd;
      
      var str_timeout = $(textbox).val().replace(/[^.0-9]/g, '');
      var new_timeout = parseFloat(str_timeout) || 1;
      
      if (new_timeout <= 5 / 60) {
        new_timeout = 5 / 60;
      }
      
      if (str_timeout.match(/^0*\.|\.0*$/)) {
        $(textbox).val(str_timeout);
      } else {
        $(textbox).val(new_timeout);
      }
      
      textbox.selectionStart = caret_pos;
      textbox.selectionEnd = caret_end;
      
      return new_timeout;
    }
    
    // Returns the URL of the page record given any element in it.
    function findUrl(context) {
      return $(context).closest('.page_record').find('.page_link').get()[0].href;
    }
    
    function fillPagesList() {
      var pages = getSetting(SETTINGS.pages_list);
      
      // Sort the pages.
      var sort_order = getSetting(SETTINGS.sort_by);
      if (sort_order != 'date added') {
        pages.sort(function(a, b) {
          if (sort_order == 'name') {
            a = getPageSetting(a, SETTINGS.page.name);
            b = getPageSetting(b, SETTINGS.page.name);
          } else if (sort_order == 'check interval') {
            a = getPageTimeout(a);
            b = getPageTimeout(b);
          } else if (sort_order == 'last check') {
            a = -getPageSetting(a, SETTINGS.page.last_check);
            b = -getPageSetting(b, SETTINGS.page.last_check);
          } else if (sort_order == 'last changed') {
            a = -getPageSetting(a, SETTINGS.page.last_changed) || 0;
            b = -getPageSetting(b, SETTINGS.page.last_changed) || 0;
          }
          
          return (a < b) ? -1 : 1;
        });
      }
      
      // Clear the list.
      $('#pages').html('');
      
      // Fill the list.
      if (pages.length > 0) {
        $.each(pages, function(i, url) {
          var page_record = $('#templates .page_record').clone();
          var advanced_set = false;
      
          var name = getPageSetting(url, SETTINGS.page.name) || 'Untitled (' + url + ')';
          if (name.length > 60) {
            name = name.replace(/([^]{20,60})(\w)\b.*$/, '$1$2...');
          }
          
          page_record.find('.page_link').attr({
            href: url
          }).text(name);
          
          page_record.find('.favicon').attr({
            src: getPageSetting(url, SETTINGS.page.icon) || 'img/page.png'
          });
          
          var last_check_span = page_record.find('.last_check_time');
          last_check_span.bind('time_updated', function() {
            var last_check = getPageSetting(url, SETTINGS.page.last_check);
            var last_check_message = last_check ? describeTimeSince(last_check) : 'never';
            
            if (last_check_message != $(this).text()) {
              $(this).fadeOut('slow', function() {
                $(this).text(last_check_message).fadeIn('slow');
              });
            }
          });
          last_check_span.trigger('time_updated');
          setInterval(function() { last_check_span.trigger('time_updated'); }, 15000);
          
          var timeout = getPageTimeout(url) / (60 * 1000);
          page_record.find('.timeout input[type=text]').val(timeout);
          if (getPageSetting(url, SETTINGS.page.timeout)) {
            page_record.find('.timeout span').addClass('enabled').removeClass('disabled');
            page_record.find('.timeout input').attr({ disabled: false });
            page_record.find('.timeout input[type=checkbox]').attr({ checked: true });
            advanced_set = true;
          }
          
          page_record.find('.mode input[type=radio]').attr({name: 'name' + crc(url) });
          
          var mode = getPageSetting(url, SETTINGS.page.mode);
          var regex = getPageSetting(url, SETTINGS.page.regex);
          var selector = getPageSetting(url, SETTINGS.page.selector);
          if (mode == null) {
            if (regex) {
              mode = 'regex';
            } else {
              mode = 'text';
            }
          }
          if (mode != 'text') {
            page_record.find('.mode span').first().addClass('enabled').removeClass('disabled');
            page_record.find('.mode input').attr({ disabled: false });
            page_record.find('.mode input[type=checkbox]').attr({ checked: true });
            page_record.find('.mode input[type=radio][value=' + mode + ']')
                       .click();
            if (mode == 'regex') {
              page_record.find('.mode input[type=text]').val(regex);
            } else if (mode == 'selector') {
              page_record.find('.mode input[type=text]').val(selector);
            }
            advanced_set = true;
          } else {
            page_record.find('.mode input[type=radio]').first().attr({ checked: true });
          }
          
          if (advanced_set) {
            page_record.find('.advanced_toggle input[type=checkbox]').attr({ checked: true });
            page_record.find('.advanced_toggle').addClass('toggled');
            page_record.find('.advanced_controls').css({ display: 'block' });
          }
          
          page_record.appendTo('#pages');
        });
      } else {
        $('#templates .empty').clone().appendTo('#pages');
      }
    }
    
    function setPageTimeout(context, timeout) {
      var url = findUrl(context);
      
      if (timeout === null)  {
        deletePageSetting(url, SETTINGS.page.timeout);
      } else {
        timeout = parseFloat(timeout) * 60 * 1000;
        if (timeout) {
          setPageSetting(url, SETTINGS.page.timeout, timeout);
        }
      }
      
      BG.scheduleCheck();
    }
    
    function setPageRegex(context, regex) {
      if (regex === null)  {
        deletePageSetting(findUrl(context), SETTINGS.page.regex);
        setPageSetting(findUrl(context), SETTINGS.page.mode, 'text');
      } else {
        var is_valid_regex = true;
        try {
          var temp_regex = new RegExp(regex);
        } catch (e) {
          is_valid_regex = false;
        }
      
        var textbox = $(context).closest('.page_record').find('.mode input[type=text]');
        var test_button = $(context).closest('.page_record').find('.mode input[type=button]');
        if (is_valid_regex) {
          textbox.removeClass('invalid');
          test_button.attr({ disabled: false });
          setPageSetting(findUrl(context), SETTINGS.page.regex, regex);
        } else {
          test_button.attr({ disabled: true });
          textbox.addClass('invalid');
        }
      }
    }
    
    function setPageSelector(context, selector) {
      if (selector === null)  {
        deletePageSetting(findUrl(context), SETTINGS.page.selector);
        setPageSetting(findUrl(context), SETTINGS.page.mode, 'text');
      } else {
        var is_valid_selector = true;
        try {
          $(selector);
        } catch (e) {
          is_valid_selector = false;
        }
      
        var textbox = $(context).closest('.page_record').find('.mode input[type=text]');
        var test_button = $(context).closest('.page_record').find('.mode input[type=button]');
        if (is_valid_selector) {
          textbox.removeClass('invalid');
          test_button.attr({ disabled: false });
          setPageSetting(findUrl(context), SETTINGS.page.selector, selector);
        } else {
          test_button.attr({ disabled: true });
          textbox.addClass('invalid');
        }
      }
    }
    
    function exportPagesList() {
      var buffer = [];
      var page_urls = getSetting(SETTINGS.pages_list);
      var add_date = new Date().getTime();
      
      buffer.push('<!DOCTYPE NETSCAPE-Bookmark-file-1>\n\n\<\!\-\- This is an' +
                  ' automatically generated file.\n     It will be read and' +
                  ' overwritten.\n     DO NOT EDIT! \-\-\>\n<META HTTP-EQUIV=' +
                  '"Content-Type" CONTENT="text/html; charset=UTF-8">\n<TITLE>' +
                  'Bookmarks</TITLE>\n<H1>Bookmarks</H1>\n<DL><p>\n');
      
      for (var i in page_urls) {
        var page_url = page_urls[i];
        var page_name = getPageSetting(page_url, SETTINGS.page.name);
        var page_icon = getPageSetting(page_url, SETTINGS.page.icon);
        var icon_attr = page_icon ? ' ICON_URI="' + page_icon + '" ' : '';
        buffer.push('        <DT><A HREF="' + page_url + '" ADD_DATE="' + add_date + '"' + icon_attr + '>' + page_name + '</A>\n');
      }
      
      buffer.push('</DL><p>');
      
      return buffer.join('');
    }
    
    function importPagesList(bookmarks) {
      var PAGE_REGEX = /<A[^<>]+>[^<>]+<\/A>/ig;
      var page_links = bookmarks.match(PAGE_REGEX);
      var imported_count = 0;
      
      for (var i in page_links) {
        var page_link = $(page_links[i]);
        var page_url = page_link.attr('HREF') || '';
        var page_name = page_link.text() || 'Untitled Page (' + page_url + ')';
        var page_icon = page_link.attr('ICON_URI') || null;
        
        if (page_url && !isPageMonitored(page_url)) {
          addPage(page_url, page_name, page_icon);
          imported_count++;
        }
      }
      
      return imported_count;
    }
    
    $(function() {
      // Turn off animations if they are disabled.
      if (getSetting(SETTINGS.animations_disabled)) $.fx.off = true;
      
      // Set up the main color/timeout/animation contols.
      initializeColorPicker();
      initializeTimeoutTextbox();
      initializeSoundSelector();
      initializeAnimationToggler();
      initializeSorter();
      initializeNotificationsChecker();
      initializeExporter();
      initializeImporter();
      
      // Set up the "Check All Now" button handler.
      $('#check_now').click(function() {
        var pages = getSetting(SETTINGS.pages_list);
        var pages_checked = 0;
        
        $('.last_check_time').text('checking..');
        
        BG.check(true, $.noop, function(url) {
          $('.last_check_time', $('#pages .page_record').has('a[href=' + url + ']')).trigger('time_updated');
        });
      });
      
      // Set up "rename page" live click handlers.
      $('.rename').live('click', function() {
        var record = $(this).closest('.page_record');
        var page_link = record.find('.page_link');
        
        if (!page_link.is(':hidden')) {
          var textbox = $('<input type="text" value="' + page_link.text() + '" />');
          var cancel_button = $('<input type="button" value="Cancel" />');
          var ok_button = $('<input type="button" value="Ok" />');
          
          cancel_button.click(function() {
            textbox.remove();
            ok_button.remove();
            cancel_button.remove();
            page_link.show();
          });
          
          ok_button.click(function() {
            page_link.text(textbox.val());
            setPageSetting(findUrl(this), SETTINGS.page.name, textbox.val());
            cancel_button.click();
          });
          
          page_link.hide();
          page_link.after(cancel_button).after(ok_button).after(textbox);
        }
      });
      
      // Set up "stop monitoring" live click handlers.
      $('.stop_monitoring').live('click', function() {
        var url = findUrl(this);
        
        removePage(url);
        BG.updateBadge();
        
        var scroll_position = scrollY;
        
        $(this).closest('.page_record td').slideUp('slow', function() {
          if ($('#pages .page_record').length == 1) {
            $('#pages').animate(
              { height: '50px', opacity: 1 }, 'slow', fillPagesList
            );
          } else {
            fillPagesList();
            scrollTo(0, scroll_position);
          }
        });
      });
      
      // Set up advanced option expansion events.
      $('.advanced_toggle input[type=checkbox]').live('click', function() {
        if ($(this).is(':checked')) {
          $(this).closest('.page_record').find('.advanced_toggle').addClass('toggled');
          $(this).closest('.page_record').find('.advanced_controls').slideDown('fast');
          
          // Apply previously-set advanced settings.
          var timeout_div = $(this).closest('.page_record').find('.timeout');
          if (timeout_div.find(':checked').length > 0) {
            setPageTimeout(this, timeout_div.find('input[type=text]').val());
          }
          var regex_div = $(this).closest('.page_record').find('.regex');
          if (regex_div.find(':checked').length > 0) {
            setPageRegex(this, regex_div.find('input[type=text]').val());
          }
        } else {
          $(this).closest('.page_record').find('.advanced_controls').slideUp('fast', function() {
            $(this).closest('.page_record').find('.advanced_toggle').removeClass('toggled');
          });
          
          setPageTimeout(this, null);
          setPageRegex(this, null);
        }
      });
      
      // Set up advanced option enabling/disabling events.
      $('.advanced_controls input[type=checkbox]').live('click', function() {
        if ($(this).is(':checked')) {
          $(this).nextAll('span').addClass('enabled').removeClass('disabled');
          $(this).nextAll('span').find('input').attr({ disabled: false });
        } else {
          $(this).nextAll('span').addClass('disabled').removeClass('enabled');
          $(this).nextAll('span').find('input').attr({ disabled: true });
        }
      });
      
      $('.timeout input[type=checkbox]').live('click', function() {
        if ($(this).is(':checked')) {
          setPageTimeout(this, $(this).nextAll('span').find('input').val());
        } else {
          setPageTimeout(this, null);
        }
      });
      
      $('.mode input[type=checkbox]').live('click', function() {
        var url = findUrl(this);
        var record = $(this).closest('.page_record');
        
        if ($(this).is(':checked')) {
          $('.mode input[type=radio]:checked', record).click();
          $('.mode input[type=text]', record).keyup();
        } else {
          setPageSetting(url, SETTINGS.page.mode, 'text');
          deletePageSetting(url, SETTINGS.page.regex);
          deletePageSetting(url, SETTINGS.page.selector);
        }
      });
      
      // Set advanced option editing events.
      $('.timeout input[type=text]').live('keyup', function() {
        setPageTimeout(this, cleanTimeoutTextbox(this));
      });
      $('.mode input[type=text]').live('keyup', function() {
        var mode = $(this).closest('.page_record').find('input[type=radio]:checked').val();
        if (mode == 'regex') {
          setPageRegex(this, $(this).val());
        } else if (mode == 'selector') {
          setPageSelector(this, $(this).val());
        }
      });
      
      // Set up mode radio box click handler
      $('.mode input[type=radio]').live('click', function() {
        var url = findUrl(this);
        var record = $(this).closest('.page_record');
        var val = $(this).val();
        
        setPageSetting(url, SETTINGS.page.mode, val);
        $('.mode input[type=text]', record).keyup();
        
        var label = val.replace(/^./, function(c) {return c.toUpperCase();}) + ':';
        $('.mode_value span', record).text(label);
      });
      
      // Set up regex/selector test click handler
      $('.mode input[type=button]').live('click', function() {
        var url = findUrl(this);
        var mode = getPageSetting(url, SETTINGS.page.mode);
        var regex = getPageSetting(url, SETTINGS.page.regex);
        var selector = getPageSetting(url, SETTINGS.page.selector);
        var button = $(this);
        
        if ((mode == 'regex' && regex) || (mode == 'selector' && selector)) {
          $(this).val('Testing...');
          $(this).closest('.mode').find('input').attr({ disabled: true });
          $.ajax({
            url: url,
            success: function(html) {
              var results = '';
              if (mode == 'regex') {
                results = findAndFormatRegexMatches(html, regex);
              } else {
                results = findAndFormatSelectorMatches(html, selector);
              }
              if (results) {
                alert('Matched:\n' + results);
              } else {
                alert('No matches.');
              }
              setPageSetting(url, SETTINGS.page.crc,
                             cleanAndHashPage(html, mode, regex, selector));
            },
            error: function() {
              alert('Could not retrieve selected page.');
            },
            complete: function() {
              button.val('Test');
              button.closest('.mode').find('input').attr({ disabled: false });
            }
          });
        }
      });
      
      // Finally, fill the pages list.
      fillPagesList();
    });
  </script>
</head>
<body>
  <h1>Monitored Pages</h1>
  <table id="templates">
    <tr class="page_record">
      <td>
        <div class="page_info">
          <img class="favicon" src="img/page.png" />
          <a class="page_link" title="Visit Page" href="#" target="_blank">Page</a>
        </div>
        <div class="page_controls">
          <label class="util active advanced_toggle">
            <!--img src="img/plus.png" /-->
            <input type="checkbox" />
            advanced
          </label>
          <span class="util active rename">
            <img src="img/rename.png" />
            rename page
          </span>
          <span class="util active stop_monitoring">
            <img src="img/stop_monitoring.png" />
            stop monitoring
          </span>
          <span class="util last_check inactive">
            <img src="img/monitor.png" />
            Last Check: <span class="last_check_time">unknown</span>.
          </span>
          <div class="advanced_controls">
            <div class="timeout">
              <input type="checkbox" />
              <span class="disabled">
                Check every
                <input type="text" disabled="disabled" />
                minutes.
              </span>
            </div>
            <div class="mode">
              <input type="checkbox" />
              <span class="mode_selector disabled">
                Custom Mode:
                <label>
                  <input type="radio" name="mode" value="regex" disabled="disabled" />
                  Regex
                </label>
                <label>
                  <input type="radio" name="mode" value="selector" disabled="disabled" />
                  Selector
                </label>
                <br />
                <span class="mode_value">
                  <span>Regex:</span>
                  <input type="text" disabled="disabled" />
                  <input type="button" disabled="disabled" value="Test" />
                </span>
              </span>
            </div>
          </div>
        </div>
      </td>
    </tr>
    <tr class="empty">
      <td>
        No pages are being monitored.
      </td>
    </tr>
  </table>
  
  <table id="pages" cellspacing="0">
    <!-- Pages go here. -->
  </table>
  <hr />
  <p class="main_controls">
    <span class="util inactive doublewide" id="notifications">
      <img src="img/notification.png" />
      Desktop notifications are
      <select>
        <option>enabled</option>
        <option>disabled</option>
      </select>
       and stay for 
      <input type="text" value="30" maxlength="5" style="width: 3em; text-align: center;">
      seconds.
    </span>
    <span class="util inactive" id="badge_color">
      <img src="img/color.png" />
      Badge color:
      <input type="text" value="#00B400" />
    </span>
  </p>
  <p class="main_controls">
    <span class="util active" id="check_now">
      <img src="img/refresh.png" />
      Check All Now
    </span>
    <span class="util inactive" id="global_timeout">
      <img src="img/clock.png" />
      Check every
      <input type="text" value="180" maxlength="5" />
      minutes.
    </span>
  </p>
  <p class="main_controls">
    <span class="util inactive doublewide" id="sound_alert">
      <img src="img/sound.png" />
      Sound Alert:
      <select>
        <option value="">None</option>
        <option value="http://work.max99x.com/cuckoo.ogg">Cuckoo</option>
        <option value="http://work.max99x.com/bell.ogg">Chime</option>
      </select>
      <input type="button" value="New" />
      <input type="button" value="Play" />
    </span>
  </p>
  <p class="main_controls">
    <span class="util inactive" id="sort">
      <img src="img/sort.png" />
      Sort page list by
      <select>
        <option>date added</option>
        <option>name</option>
        <option>URL</option>
        <option>check interval</option>
        <option>last check</option>
        <option>last changed</option>
      </select>.
    </span>
    <span class="util inactive" id="animation">
      <img src="img/animation.png" />
      Animations are
      <select>
        <option>enabled</option>
        <option>disabled</option>
      </select>.
    </span>
  </p>
  <p class="main_controls">
    <span class="util active" id="import">
      <img src="img/import.png" />
      Import Pages
    </span>
    <span class="util active" id="export">
      <img src="img/export.png" />
      Export Pages
    </span>
  </p>
  <div id="export_form">
    Copy this text into a file and save it as bookmarks.html:
    <textarea wrap='off'>...</textarea>
    <button>Close</button>
  </div>
  <div id="import_form">
    Paste the context of your bookmarks.html here:
    <textarea wrap='off'></textarea>
    <button id="import_perform">Import</button>
    <button id="import_cancel">Cancel</button>
  </div>
  <div id="new_sound_form">
    <label>Name:</label>
    <input type="text" id="new_sound_name" value="" />
    <label>URL (MP3 or OGG file):</label>
    <input type="text" id="new_sound_url" value="" />
    <div id="new_sound_buttons">
      <button id="new_sound_create">Create</button>
      <button id="new_sound_cancel">Cancel</button>
    </div>
  </div>
</body>
</html>