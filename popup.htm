<!DOCTYPE html>
<html>
<head>
	<title>Page Monitor Popup</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="styles.css" />
  <script type="text/javascript" src="lib/jquery-1.4.1.js"></script> 
  <script type="text/javascript" src="monitor.js"></script>
  <script type="text/javascript">
    $(function() {
      // Turn off animations if they are disabled.
      if (getSetting(SETTINGS.animations_disabled)) $.fx.off = true;
    
      // "Monitor this page" handler.
      $('#monitor_page').click(monitorCurrentPage);
      
      // "Check All Now" handler.
      $('#check_now').click(checkAllPages);
      
      // Handlers to mark the page visited.
      $('.mark_visited').live('click', markPageVisited);
      $('.view_diff').live('click', markPageVisited);
      $('.page_link').live('click', markPageVisited);
      
      // "Stop monitoring" live click handler.
      $('.stop_monitoring').live('click', function() {
        var url = getNotificationUrl(this);
        markPageVisited.call(this);
        removePage(url);
      });
      
      // Mark page monitored if it is (initially).
      chrome.tabs.getSelected(null, function(tab) {
        isPageMonitored(tab.url, setPageMonitoredStatus);
      });
      
      // Initially fill the notification table.
      fillNotifications();
    });
    
    // Returns the URL of the notification record given any element in it.
    function getNotificationUrl(context) {
      return $(context).closest('.notification').find('.page_link').attr('href');
    }
    
    // Hides a notification record given any element in it.
    function markPageVisited() {
      var $this = $(this);
      
      var url = getNotificationUrl(this);
      console.log('Marking visited: ' + url);
      
      setPageSettings(url, { updated: false }, function() {
        BG.updateBadge();
        BG.takeSnapshot(url, BG.scheduleCheck);
        
        console.log('Marked visited; proceeding.');
        $this.closest('.notification td').slideUp('slow', function() {
          if ($('#notifications .notification').length == 1) {
            $('#notifications').animate(
              { height: '50px', opacity: 1 }, 'slow', fillNotifications
            );
          } else {
            fillNotifications();
          }
        });
      });
    }
    
    // Mark page as monitored/unmonitored with the relevant label/event changes.
    function setPageMonitoredStatus(monitored) {
      if (monitored) {
        $('#monitor_page').unbind('click')
                          .addClass('inactive').removeClass('active').addClass('emphasized')
                          .find('span').text('Page Monitored');
      } else {
        $('#monitor_page').click(monitorCurrentPage)
                          .removeClass('inactive').addClass('active').removeClass('emphasized')
                          .find('span').text('Monitor This Page');
      }
    }
    
    // Add current page to the monitored list.
    function monitorCurrentPage() {
      $('#monitor_page').css('cursor', 'progress');
      chrome.tabs.getSelected(null, function(tab) {
        // If the page is still loading, try a little while later.
        if (tab.status == 'loading') {
          setTimeout(monitorCurrentPage, 100);
        } else {
          addPage({ url: tab.url, name: tab.title, icon: tab.favIconUrl }, function() {
            setPageMonitoredStatus(true);
          });
        }
      });
    }
    
    // Fill the notifications list with notifications for each updated page. If
    // no pages are updated, set teh appropriate message.
    function fillNotifications(callback) {
      console.log('Filling list.');
      getAllUpdatedPages(function(pages) {
        $('#notifications').html('');
        
        if (pages.length > 0) {
          $.each(pages, function(i, page) {
            var notification = $('#templates .notification').clone();
        
            var name = page.name;
            if (name.length > 60) {
              name = name.replace(/([^]{20,60})(\w)\b.*$/, '$1$2...');
            }
            
            notification.find('.page_link').attr({
              href: page.url
            }).text(name);
            
            notification.find('.favicon').attr({
              src: page.icon || 'img/page.png'
            });
            
            notification.find('.view_diff').attr({
              href: 'diff.htm#' + btoa(page.url)
            });
          
            notification.appendTo('#notifications');
          });
        } else {
          $('#templates .empty').clone().appendTo('#notifications');
        }
        
        (callback || $.noop)();
      });
    }
    
    // Force a check on all pages that are being monitored. Does some complex
    // animation to smoothly slide in the current notifications, display a
    // loader, then slide out the new notifications.
    function checkAllPages() {
      getAllPageURLs(function(pages) {
        // If there are no pages to check, return.
        if (pages.length === 0 ||
            pages.length == $('#notifications .notification').length) {
          return;
        }
        
        // Disable this event handler.
        $('#check_now').unbind('click');
        
        // Slide in the notifications list.
        // NOTE: Setting opacity to 0 leads to jumpiness (perhaps setting display: none?).
        if ($('#notifications .notification').length > 0) {
          var fadeout_target = { height: '50px', opacity: 0.01 };
        } else {
          var fadeout_target = { opacity: 0.01 };
        }
        
        $('#notifications').animate(fadeout_target, 'slow', function() {
          // Once the list has slid into its minimal state, remove all contents
          // and fade in the loader.
          $(this).html('');
          $(this).addClass('loading');
          $('#templates .loading_spacer').clone().appendTo($(this));
          $(this).show();
          $(this).animate({ opacity: 1.0 }, 400);
        });
        
        BG.check(true, function() {
          console.log('Check successful. Refilling.');
          // Fade out the loader.
          $('#notifications').animate({ opacity: 0 }, 400, function() {
            var $this = $(this);
            // Fill the table - done at this point to get the final height.
            fillNotifications(function() {
              // Remember the height and content of the table.
              var height = $this.height();
              var html = $this.html();
              
              // Remove the loader, empty the table, and reset its height back to
              // 50px. The user does not see any change from the time the fade-out
              // finished.
              $this.removeClass('loading').html('').height(50);
              // Slide the table to our pre-calculated height.
              $this.animate({ height: height + 'px' }, 'slow', function() {
                // Put the table contents back and fade it in.
                $this.css({ height: 'auto' });
                $this.html(html);
                $this.animate({ opacity: 1 }, 400);
                $('#check_now').click(checkAllPages);
              });
            });
          });
        });
      });
    }
  </script>
  <style type="text/css">
    body {
      width: 600px;
      margin: none;
      padding-bottom: 1.5em;
      overflow: hidden;
    }

    .util, .util:link, .util:visited {
      float: left;
      width: 150px;
      text-align: left;
      display: block;
      color: #849ccb !important;
    }

    .emphasized, .emphasized:hover {
      text-shadow: #849ccb 0px -1px 0px !important;
    }
    
    .loading {
      width: 100%;
      background: url('img/loader.gif') center 13px no-repeat;
    }
    
    .loading_spacer {
      height: 49px;
    }
    
    .notification div {
      width: 600px;
    }
    
    #monitor_page {
      text-align: right;
    }
  </style>
</head>
<body>
  <table id="templates">
    <tr class="notification">
      <td>
        <div class="page_info">
          <img class="favicon" src="img/page.png" />
          <a class="page_link" href="#" target="_blank">Page</a>
        </div>
        <div class="page_controls">
          <span class="util active stop_monitoring">
            <img src="img/stop_monitoring.png" />
            stop monitoring
          </span>
          <span class="util active mark_visited">
            <img src="img/mark_visited.png" />
            mark visited
          </span>
          <a class="util active view_diff" href="#" target="_blank">
            <img src="img/diff.png" />
            view changes
          </a>
        </div>
      </td>
    </tr>
    <tr class="empty">
      <td>
        No changes found.
      </td>
    </tr>
    <tr class="loading_spacer">
      <td>
        &nbsp;
      </td>
    </tr>
  </table>
      
  <table id="notifications" cellspacing="0">
    <!-- Notification entries go here. -->
  </table>
  <hr />
  <p class="main_controls">
    <a class="util active" href="https://chrome.google.com/extensions/detail/pemhgklkefakciniebenbfclihhmmfcd" target="_blank">
      <img src="img/feedback.png" />
      <span>Feedback</span>
    </a>
    <a class="util active" href="options.htm" target="_blank">
      <img src="img/options.png" />
      <span>Options</span>
    </a>
    <span class="util active" id="check_now">
      <img src="img/refresh.png" />
      <span>Check All Now</span>
    </span>
    <span class="util active" id="monitor_page">
      <img src="img/monitor.png" />
      <span>Monitor This Page</span>
    </span>
  </p>
</body>
</html>